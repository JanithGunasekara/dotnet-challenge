Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  VPCShortName:
    Type: String
    Default: DotNetApp-Prod
  PublicSubnet1Id:
    Type: String
  PublicSubnet1Az:
    Type: String
  PublicSubnet2Id:
    Type: String
  PublicSubnet2Az:
    Type: String
  PrivateSubnet1Id:
    Type: String
  PrivateSubnet1Az:
    Type: String
  PrivateSubnet2Id:
    Type: String
  PrivateSubnet2Az:
    Type: String

Resources:
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref DotNetAppALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
        - !Ref PublicSubnet3Id
      IpAddressType: ipv4
      Type: application
      Tags:
        - Key: Name
          Value: !Join ["-", [ !Ref VPCShortName, "ALB" ]]

  DotNetAppALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId


  DotNetAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Name: backend-api-service
      Port: 8081
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VpcId

  DotNetAppListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DotNetAppTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 8081
      Protocol: HTTP

Outputs:
  DotNetAppTargetGroup:
    Value: !Ref DotNetAppTargetGroup
    Export:
      Name: DotNetAppTargetGroup